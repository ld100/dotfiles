#!/bin/zsh
# -*- mode: sh -*-
# zsh configuration
# (c) 2011-2017 Alexander Lockshyn
# ld100 AT mourk.com
#
# Thanks to:
# Alexander Solovyov

### Global vars
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_TIME=C
export LC_NUMERIC=C

### Paths
### OSX-specific paths
if [ `uname` = "Darwin" ];
then
	[[ -s "/etc/profile" ]] && source "/etc/profile"

	export PATH=/opt/homebrew/bin:$PATH
	export PATH=/usr/local/bin:$PATH
	export PATH=/usr/local/sbin:$PATH
	# export PATH=/usr/local/share/python:$PATH
	export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

	# Java language-specific settings
	export JAVA_HOME=$(/usr/libexec/java_home)
	export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"

	# GO language-specific settings
	export GOPATH=$HOME/.go
	export GOROOT="$(brew --prefix golang)/libexec"
	export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
	# command -v vg >/dev/null 2>&1 && eval "$(vg eval --shell zsh)"

	# Node Version Manager
	export NVM_DIR="$HOME/.nvm"
	[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
	[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

	#Path for local "bin", that is used by Java/Play
	export PATH=~/bin:$PATH

	# Completions math
	fpath=(/usr/local/share/zsh-completions $fpath)

	# Python Settings
	# pip should only run if there is a virtualenv currently activated
	export PIP_REQUIRE_VIRTUALENV=true
	# cache pip-installed packages to avoid re-downloading
	export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

	# Virtualenv Settings
	# export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
	export WORKON_HOME=$HOME/.virtualenvs
	# [[ -s "/usr/local/bin/virtualenvwrapper.sh" ]] && source "/usr/local/bin/virtualenvwrapper.sh"

fi


### Linux-specific settings
if [ `uname` = "Linux" ];
then
	export TERM=xterm
	# Use docker inside windows linux subsystem to proxy calls to the host windows machine
	# export DOCKER_HOST=tcp://127.0.0.1:2375
	# export DOCKER_HOST=tcp://192.168.99.100:2376
	# export DOCKER_MACHINE_NAME=default
	# export DOCKER_TLS_VERIFY=1
	# export DOCKER_CERT_PATH=/c/Users/ld100/.docker/machine/machines/default
	# export NO_PROXY=192.168.99.100

	export GOPATH=${HOME}/go
	export PATH="$PATH:$GOPATH/bin"
	# export GOBIN=$HOME/go/bin:$PATH

	# Java home
	export JAVA_HOME=$(readlink -f /usr/bin/javac | sed "s:/bin/javac::")

	# Dotnet support
	export PATH="$PATH:$HOME/.dotnet/tools/"

	# Node version manager
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

	export PATH=~/.gem/ruby/2.7.0/bin:$PATH
	export PATH=$PATH:~/flutter/bin
	export ANDROID_HOME=$HOME/Android/Sdk
	export PATH=$PATH:$ANDROID_HOME/tools
	export PATH=$PATH:$ANDROID_HOME/platform-tools
fi

### History
# If I type cd and then cd again, only save the last one
setopt HIST_IGNORE_DUPS

# Even if there are commands inbetween commands that are the same, still only save the last one
setopt HIST_IGNORE_ALL_DUPS

# Pretty    Obvious.  Right?
setopt HIST_REDUCE_BLANKS

# If a line starts with a space, don't save it.
setopt HIST_IGNORE_SPACE
setopt HIST_NO_STORE

# When using a hist thing, make a newline show the change before executing it.
setopt HIST_VERIFY

# share history between multiple sessions
setopt SHARE_HISTORY

# Don't overwrite, append!
setopt APPEND_HISTORY

# Write after each command
# setopt INC_APPEND_HISTORY

# Save the time and how long a command ran
setopt EXTENDED_HISTORY

setopt HIST_SAVE_NO_DUPS
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_FIND_NO_DUPS

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

### Command line prompt

# Apply theming defaults
# PS1="%n@%m:%~%# "
# PROMPT='%B%F{green}%n@%m%f:%F{blue}%~%f%b%(!.#.$) '
PROMPT='%{$fg[green]%}%n%{$reset_color%}%{$fg_bold[blue]%}@%{$reset_color%}%{$fg[red]%}%m%{$reset_color%} { %{$fg_bold[yellow]%}${PWD/#$HOME/~}%{$reset_color%} } $(prompt_char) '
RPROMPT='%{$fg[magenta]%}$(get_git_prompt_info)%{$reset_color%}'
autoload -U colors && colors

### RVM integration
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

### Show Git Branch vars
typeset -ga preexec_functions
typeset -ga precmd_functions
typeset -ga chpwd_functions
export __CURRENT_GIT_BRANCH=
export __CURRENT_GIT_VARS_INVALID=1

### Auto completion (New Style)
autoload -Uz compinit
compinit -u
zmodload zsh/complist
zstyle ':completion:*' menu yes select
# Case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' \
	'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# This gives more extensive tab completion
setopt completeinword

### Colors
### OSX-specific color settings
if [ `uname` = "Darwin" ];
then
	export CLICOLOR=1
	export LSCOLORS=gxfxbxdxcxegedabagacad
	export LS_COLORS='di=36;40:ln=35;40:so=31;40:pi=33;40:ex=32;40:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:'

	# Colorize dir completion
	zstyle ':completion:*' list-colors 'exfxcxdxbxegedabagacad'

	# Enable ls colors
	if [ "$DISABLE_LS_COLORS" != "true" ]
	then
	  # Find the option for using colors in ls, depending on the version: Linux or BSD
	  ls --color -d . &>/dev/null 2>&1 && alias ls='ls --color=tty' || alias ls='ls -G'
	fi
fi

### Linux-specific color settings
if [ `uname` = "Linux" ];
then
	export LS_COLORS='di=36;40:ln=35;40:so=31;40:pi=33;40:ex=32;40:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:'

	# enable color support of ls and also add handy aliases
	if [ -x /usr/bin/dircolors ]; then
		test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
		alias ls='ls --color=auto'
		#alias dir='dir --color=auto'
		#alias vdir='vdir --color=auto'

		alias grep='grep --color=auto'
		alias fgrep='fgrep --color=auto'
		alias egrep='egrep --color=auto'
	fi

	# Tmux/Screen mouse fixes
	if [ $TERM = "screen" ]; then
	    export TERM=xterm-color
	fi
	if [ -n "$TMUX" ]; then
	    export COLORTERM=rxvt
	fi

fi

### Different options
# setopt NO_BEEP

# Type ".." instead of "cd ..", "/usr/include" instead of "cd /usr/include".
setopt AUTO_CD

# allow functions to have local options
setopt LOCAL_OPTIONS

# allow functions to have local traps
setopt LOCAL_TRAPS

# Now we can pipe to multiple outputs!
setopt MULTIOS

# Spell check commands!  (Sometimes annoying)
# setopt CORRECT

# This will use named dirs when possible
setopt AUTO_NAME_DIRS

# 10 second wait if you do something that will delete everything.  I wish I'd had this before...
setopt RM_STAR_WAIT

setopt cdablevarS

# pound sign in interactive prompt
# This is useful to remember command in your history without executing them.
setopt interactivecomments

# Superglobs
setopt extendedglob
unsetopt caseglob

# Setup the prompt with pretty colors
setopt prompt_subst

# only fools wouldn't do this ;-)
export EDITOR="mcedit"

if [[ x$WINDOW != x ]]
then
	SCREEN_NO="%B$WINDOW%b "
else
	SCREEN_NO=""
fi


### Keyboard config
# autoload zkbd
# [[ ! -d ~/.zkbd ]] && mkdir ~/.zkbd
# [[ ! -f ~/.zkbd/$TERM-$VENDOR-$OSTYPE ]] && zkbd

bindkey "\e[1~" beginning-of-line
bindkey "\e[2~" quoted-insert
bindkey "\e[3~" delete-char
bindkey "\e[4~" end-of-line
bindkey "\e[5~" beginning-of-history
bindkey "\e[6~" end-of-history
bindkey "\e[7~" beginning-of-line
bindkey "\e[8~" end-of-line
bindkey "\e[H" beginning-of-line
bindkey "\e[F" end-of-line
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line
bindkey "\eOd" backward-word
bindkey "\eOc" forward-word

### Aliases
alias ll="ls -alF"
alias la="ls -A"
alias l="ls -CF"
alias tmuxinate="tmux attach || tmux new"
alias unzipall="for z in *.zip; do unzip $z; done"
alias killpods="kubectl delete pod --grace-period=0 --force"
# alias swagger='docker run --rm -it  --user $(id -u):$(id -g) -e GOPATH=$(go env GOPATH):/go -v $HOME:$HOME -w $(pwd) quay.io/goswagger/swagger'

### Functions

export SWAGGER_VER="v0.25.0"
function swagger {
  echo ""
  echo "##################################"
  echo "Running go-swagger ${SWAGGER_VER}"
  echo "##################################"
  echo ""
  docker run --rm -it  --user $(id -u):$(id -g) -e GOPATH=$(go env GOPATH):/go -v $HOME:$HOME -w $(pwd) quay.io/goswagger/swagger:${SWAGGER_VER} "$@";
}

#### Prompt-specific
function prompt_char {
	git branch >/dev/null 2>/dev/null && echo '±' && return
	hg root >/dev/null 2>/dev/null && echo '☿' && return
	echo '○'
}

function virtualenv_info {
	[ $VIRTUAL_ENV ] && echo '('`basename $VIRTUAL_ENV`') '
}

function syspip {
	PIP_REQUIRE_VIRTUALENV="" pip "$@"
}

function syspip3 {
	PIP_REQUIRE_VIRTUALENV="" pip3 "$@"
}

#### My Utils
function clear_dns_cache() {
	if [ `uname` = "Darwin" ]; then
		dscacheutil -flushcache
	elif [ `uname` = "Linux" ]; then
		if [[ -x =nscd ]]; then
			sudo /etc/init.d/nscd restart
		else
			echo "Nothing to flush: nscd is not installed"
		fi
	fi
}

# Clear WhiteBoard image
# Borrowed from https://gist.github.com/lelandbatey/8677901
# USAGE: clean_whiteboard_photo source.jpg result.jpg
function clean_whiteboard_photo() {
	if [[ -x =convert ]]; then
		convert "$1" -morphology Convolve DoG:15,100,0 -negate -normalize -blur 0x1 -channel RBG -level 60%,91%,0.1 "$2"
	else
		echo "Error: imagemagick is not installed"
	fi
}

# Download a webpage and all of its CSS, JavaScript
function scrap_webpage() {
	if [[ -x =wget ]]; then
		wget -E -H -k -K -p "$1"
	else
		echo "Error: wget is not installed"
	fi
}

# Update all GIT repos in specific directory
update_repos() {
	if [ `uname` = "Darwin" ]; then
		find . -type d -depth 1 -exec git --git-dir={}/.git --work-tree=$PWD/{} pull origin master \;
	elif [ `uname` = "Linux" ]; then
		ls | xargs -I{} git -C {} pull
	fi
}
alias gitup=update_repos

# Prefer ipython for interactive shell
smart_python () {
	# this function is actually rather dumb
	if [[ -n $1 ]]; then
		python $argv
	else
		#if no parameters were given, then assume we want an ipython shell
		if [[ -n $commands[ipython] ]]; then
			ipython
		else
			python
		fi
	fi
}

alias py=smart_python

function start_pg() {
	if [ `uname` = "Darwin" ]; then
		pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
	elif [ `uname` = "Linux" ]; then
		echo 'Not available on Linux'
	fi
}

function stop_pg() {
	if [ `uname` = "Darwin" ]; then
		pg_ctl -D /usr/local/var/postgres stop -s -m fast
	elif [ `uname` = "Linux" ]; then
		echo "Not available on Linux"
	fi
}

# TODO: Add goodies from Medium article
# https://medium.com/statuscode/dockercheatsheet-9730ce03630d
function docker_kill_running() {
	docker kill $(docker ps -q)
}

function docker_kill_stopped() {
	docker rm $(docker ps -a -q) --force
}

function docker_kill_all() {
	docker rmi $(docker images -q) --force
}

function docker_kill_dangling() {
	docker rmi $(docker images -q -f dangling=true) --force
}

function docker_prune_cache() {
	if [ `uname` = "Darwin" ]; then
		echo "Removing OSX Docker cache..."
		rm -rf $HOME/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2
		echo "Done."
	else
		echo "No need in cleaning up docker cache outside OSX."
	fi
}

function _install_linux_goodies() {
	alias install_everything=""
	if [[ -x =apt-get ]]; then
		sudo apt-get install nmap netdiag htop mc screen tmux vim ne wget ncdu \
		sysstat ccze pv logrotate rkhunter etckeeper
	else
		echo "Sorry, only debian-based distros are currently supported"
		if [[ -x =yum ]]; then
			echo "RPM-based distros are not supported yet"
		fi
	fi
	echo "Installation finished"
}

function _install_osx_goodies() {
	# Create symlink for Sublime Text Editor
	ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl

	if [[ -x =brew ]]; then
		brew install wget midnight-commander pv gawk gnu-sed
	else
		echo "Please install Homebrew first"
	fi
}

function _doctor() {
	for found in ~/.dotfiles/dotfiles/*; do
		ln -fs $found ~/.$found:t
	done

	mkdir -p ~/.ssh
	ln -fs ~/.dotfiles/ssh/authorized_keys ~/.ssh/authorized_keys
	ln -fs ~/.dotfiles/ssh/config ~/.ssh/config

	source ~/.zshrc
}

#### EDI is a bot name to do different operations with dotfiles
function edi() {
	if [ $# -gt 0 ]; then
		# HELP methods
		if [ $1 = "help" ]; then
			echo "Available methods are: doctor, update, install"
		fi

		# Update dotfiles code
		if [ $1 = "update" ]; then
			cd ~/.dotfiles && git pull
			cd $OLDPWD
			_doctor
		fi

		# Fix symlinks, etc
		if [ $1 = "doctor" ]; then
			_doctor
		fi

		# Additional utils installation
		if [ $1 = "install" ]; then
			if [[ -z $2 ]]; then
				echo "Please provide package name to install"

			# Install goodies
			elif [ $2 = "goodies" ]; then
				if [ `uname` = "Darwin" ];
				then
					echo "Installing OSX goodies..."
					_install_osx_goodies
				fi

				if [ `uname` = "Linux" ];
				then
					echo "Installing Linux Ubuntu goodies..."
					_install_linux_goodies
				fi
			fi
		fi
	fi
}


### Git Functions
zsh_git_invalidate_vars() {
	export __CURRENT_GIT_VARS_INVALID=1
}
zsh_git_compute_vars() {
	export __CURRENT_GIT_BRANCH="$(parse_git_branch)"
	export __CURRENT_GIT_VARS_INVALID=
}
parse_git_branch() {
	git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1) -- /'
}

# Alternative git-branch func
gitbranch() {
	git_branch=`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ $git_branch ]; then
		echo "$git_branch"
	fi
}

chpwd_functions+='zsh_git_chpwd_update_vars'
	zsh_git_chpwd_update_vars() {
		zsh_git_invalidate_vars
	}

preexec_functions+='zsh_git_preexec_update_vars'
	zsh_git_preexec_update_vars() {
		case "$(history $HISTCMD)" in
			*git*) zsh_git_invalidate_vars ;;
		esac
}

get_git_prompt_info() {
	test -n "$__CURRENT_GIT_VARS_INVALID" && zsh_git_compute_vars
	echo $__CURRENT_GIT_BRANCH
}

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /opt/terraform/terraform terraform
